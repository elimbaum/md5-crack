<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="517.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="517.00"> </text><svg id="frames" x="10" width="1180"><g><title>libsystem_pthread.dylib`cthread_yield (28 samples, 0.10%)</title><rect x="0.0215%" y="309" width="0.1005%" height="15" fill="rgb(227,0,7)"/><text x="0.2715%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_trylock (68 samples, 0.24%)</title><rect x="0.1221%" y="309" width="0.2442%" height="15" fill="rgb(217,0,24)"/><text x="0.3721%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (2,416 samples, 8.68%)</title><rect x="2.4346%" y="293" width="8.6754%" height="15" fill="rgb(221,193,54)"/><text x="2.6846%" y="303.50">libsystem_ke..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (42 samples, 0.15%)</title><rect x="11.1135%" y="293" width="0.1508%" height="15" fill="rgb(248,212,6)"/><text x="11.3635%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (41 samples, 0.15%)</title><rect x="11.3505%" y="293" width="0.1472%" height="15" fill="rgb(208,68,35)"/><text x="11.6005%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (54 samples, 0.19%)</title><rect x="11.5767%" y="293" width="0.1939%" height="15" fill="rgb(232,128,0)"/><text x="11.8267%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (949 samples, 3.41%)</title><rect x="13.3937%" y="277" width="3.4077%" height="15" fill="rgb(207,160,47)"/><text x="13.6437%" y="287.50">lib..</text></g><g><title>libsystem_malloc.dylib`szone_size (544 samples, 1.95%)</title><rect x="17.2897%" y="261" width="1.9534%" height="15" fill="rgb(228,23,34)"/><text x="17.5397%" y="271.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (505 samples, 1.81%)</title><rect x="17.4297%" y="245" width="1.8134%" height="15" fill="rgb(218,30,26)"/><text x="17.6797%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`free (672 samples, 2.41%)</title><rect x="16.8695%" y="277" width="2.4130%" height="15" fill="rgb(220,122,19)"/><text x="17.1195%" y="287.50">li..</text></g><g><title>libsystem_kernel.dylib`__ulock_wait (2,564 samples, 9.21%)</title><rect x="22.3922%" y="261" width="9.2068%" height="15" fill="rgb(250,228,42)"/><text x="22.6422%" y="271.50">libsystem_ker..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (344 samples, 1.24%)</title><rect x="32.8629%" y="245" width="1.2352%" height="15" fill="rgb(240,193,28)"/><text x="33.1129%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (771 samples, 2.77%)</title><rect x="31.6888%" y="261" width="2.7685%" height="15" fill="rgb(216,20,37)"/><text x="31.9388%" y="271.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (100 samples, 0.36%)</title><rect x="34.0982%" y="245" width="0.3591%" height="15" fill="rgb(206,188,39)"/><text x="34.3482%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4,457 samples, 16.00%)</title><rect x="19.2826%" y="277" width="16.0042%" height="15" fill="rgb(217,207,13)"/><text x="19.5326%" y="287.50">libsystem_malloc.dylib`fr..</text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (231 samples, 0.83%)</title><rect x="34.4573%" y="261" width="0.8295%" height="15" fill="rgb(231,73,38)"/><text x="34.7073%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_unlock_slow (33 samples, 0.12%)</title><rect x="35.4447%" y="277" width="0.1185%" height="15" fill="rgb(225,20,46)"/><text x="35.6947%" y="287.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (93 samples, 0.33%)</title><rect x="35.5632%" y="277" width="0.3339%" height="15" fill="rgb(210,31,41)"/><text x="35.8132%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (181 samples, 0.65%)</title><rect x="38.7913%" y="213" width="0.6499%" height="15" fill="rgb(221,200,47)"/><text x="39.0413%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (764 samples, 2.74%)</title><rect x="36.8846%" y="229" width="2.7434%" height="15" fill="rgb(226,26,5)"/><text x="37.1346%" y="239.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (816 samples, 2.93%)</title><rect x="36.7123%" y="245" width="2.9301%" height="15" fill="rgb(249,33,26)"/><text x="36.9623%" y="255.50">li..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (967 samples, 3.47%)</title><rect x="36.1772%" y="261" width="3.4723%" height="15" fill="rgb(235,183,28)"/><text x="36.4272%" y="271.50">lib..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (34 samples, 0.12%)</title><rect x="39.6495%" y="261" width="0.1221%" height="15" fill="rgb(221,5,38)"/><text x="39.8995%" y="271.50"></text></g><g><title>md5-crack`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (7,787 samples, 27.96%)</title><rect x="11.8855%" y="293" width="27.9615%" height="15" fill="rgb(247,18,42)"/><text x="12.1355%" y="303.50">md5-crack`&lt;alloc::string::String as core::ite..</text></g><g><title>md5-crack`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,074 samples, 3.86%)</title><rect x="35.9905%" y="277" width="3.8565%" height="15" fill="rgb(241,131,45)"/><text x="36.2405%" y="287.50">md5-..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (67 samples, 0.24%)</title><rect x="40.8812%" y="277" width="0.2406%" height="15" fill="rgb(249,31,29)"/><text x="41.1312%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc (44 samples, 0.16%)</title><rect x="41.1218%" y="277" width="0.1580%" height="15" fill="rgb(225,111,53)"/><text x="41.3718%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1,005 samples, 3.61%)</title><rect x="46.0340%" y="213" width="3.6087%" height="15" fill="rgb(238,160,17)"/><text x="46.2840%" y="223.50">libs..</text></g><g><title>libsystem_kernel.dylib`__ulock_wake (418 samples, 1.50%)</title><rect x="49.6427%" y="213" width="1.5010%" height="15" fill="rgb(214,148,48)"/><text x="49.8927%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (35 samples, 0.13%)</title><rect x="51.1437%" y="213" width="0.1257%" height="15" fill="rgb(232,36,49)"/><text x="51.3937%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (629 samples, 2.26%)</title><rect x="51.3124%" y="213" width="2.2586%" height="15" fill="rgb(209,103,24)"/><text x="51.5624%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (215 samples, 0.77%)</title><rect x="52.7990%" y="197" width="0.7720%" height="15" fill="rgb(229,88,8)"/><text x="53.0490%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (112 samples, 0.40%)</title><rect x="53.5746%" y="213" width="0.4022%" height="15" fill="rgb(213,181,19)"/><text x="53.8246%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3,120 samples, 11.20%)</title><rect x="42.8238%" y="229" width="11.2033%" height="15" fill="rgb(254,191,54)"/><text x="43.0738%" y="239.50">libsystem_malloc..</text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (42 samples, 0.15%)</title><rect x="54.0307%" y="229" width="0.1508%" height="15" fill="rgb(241,83,37)"/><text x="54.2807%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3,254 samples, 11.68%)</title><rect x="42.5329%" y="245" width="11.6844%" height="15" fill="rgb(233,36,39)"/><text x="42.7829%" y="255.50">libsystem_malloc...</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3,453 samples, 12.40%)</title><rect x="41.9010%" y="261" width="12.3990%" height="15" fill="rgb(226,3,54)"/><text x="42.1510%" y="271.50">libsystem_malloc.dy..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (60 samples, 0.22%)</title><rect x="54.3000%" y="261" width="0.2154%" height="15" fill="rgb(245,192,40)"/><text x="54.5500%" y="271.50"></text></g><g><title>md5-crack`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,656 samples, 13.13%)</title><rect x="41.4306%" y="277" width="13.1279%" height="15" fill="rgb(238,167,29)"/><text x="41.6806%" y="287.50">md5-crack`alloc::raw..</text></g><g><title>md5-crack`&lt;itertools::adaptors::multi_product::MultiProduct&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,207 samples, 15.11%)</title><rect x="39.8470%" y="293" width="15.1065%" height="15" fill="rgb(232,182,51)"/><text x="40.0970%" y="303.50">md5-crack`&lt;itertools::a..</text></g><g><title>md5-crack`itertools::adaptors::multi_product::MultiProduct&lt;I&gt;::iterate_last (110 samples, 0.39%)</title><rect x="54.5585%" y="277" width="0.3950%" height="15" fill="rgb(231,60,39)"/><text x="54.8085%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (61 samples, 0.22%)</title><rect x="56.6699%" y="277" width="0.2190%" height="15" fill="rgb(208,69,12)"/><text x="56.9199%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (257 samples, 0.92%)</title><rect x="57.3162%" y="261" width="0.9228%" height="15" fill="rgb(235,93,37)"/><text x="57.5662%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (244 samples, 0.88%)</title><rect x="57.3629%" y="245" width="0.8762%" height="15" fill="rgb(213,116,39)"/><text x="57.6129%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (394 samples, 1.41%)</title><rect x="56.8889%" y="277" width="1.4148%" height="15" fill="rgb(222,207,29)"/><text x="57.1389%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (110 samples, 0.39%)</title><rect x="59.5138%" y="261" width="0.3950%" height="15" fill="rgb(206,96,30)"/><text x="59.7638%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (51 samples, 0.18%)</title><rect x="60.1135%" y="245" width="0.1831%" height="15" fill="rgb(218,138,4)"/><text x="60.3635%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (131 samples, 0.47%)</title><rect x="59.9160%" y="261" width="0.4704%" height="15" fill="rgb(250,191,14)"/><text x="60.1660%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (588 samples, 2.11%)</title><rect x="58.3037%" y="277" width="2.1114%" height="15" fill="rgb(239,60,40)"/><text x="58.5537%" y="287.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (94 samples, 0.34%)</title><rect x="61.8837%" y="261" width="0.3375%" height="15" fill="rgb(206,27,48)"/><text x="62.1337%" y="271.50"></text></g><g><title>md5-crack`&lt;D as digest::digest::Digest&gt;::finalize (2,323 samples, 8.34%)</title><rect x="60.5982%" y="277" width="8.3414%" height="15" fill="rgb(225,35,8)"/><text x="60.8482%" y="287.50">md5-crack`&lt;D..</text></g><g><title>md5-crack`md5::utils::compress (1,871 samples, 6.72%)</title><rect x="62.2213%" y="261" width="6.7184%" height="15" fill="rgb(250,213,24)"/><text x="62.4713%" y="271.50">md5-crack..</text></g><g><title>md5-crack`&lt;D as digest::digest::Digest&gt;::update (168 samples, 0.60%)</title><rect x="68.9396%" y="277" width="0.6033%" height="15" fill="rgb(247,123,22)"/><text x="69.1896%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (77 samples, 0.28%)</title><rect x="69.2664%" y="261" width="0.2765%" height="15" fill="rgb(231,138,38)"/><text x="69.5164%" y="271.50"></text></g><g><title>md5-crack`&lt;md5::Md5 as core::default::Default&gt;::default (133 samples, 0.48%)</title><rect x="69.5429%" y="277" width="0.4776%" height="15" fill="rgb(231,145,46)"/><text x="69.7929%" y="287.50"></text></g><g><title>md5-crack`&lt;rayon::iter::find::FindFolder&lt;T,P&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (4,210 samples, 15.12%)</title><rect x="54.9930%" y="293" width="15.1172%" height="15" fill="rgb(251,118,11)"/><text x="55.2430%" y="303.50">md5-crack`&lt;rayon::iter:..</text></g><g><title>md5-crack`__rdl_dealloc (30 samples, 0.11%)</title><rect x="70.1102%" y="293" width="0.1077%" height="15" fill="rgb(217,147,25)"/><text x="70.3602%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (98 samples, 0.35%)</title><rect x="74.1032%" y="277" width="0.3519%" height="15" fill="rgb(247,81,37)"/><text x="74.3532%" y="287.50"></text></g><g><title>md5-crack`crossbeam_epoch::default::HANDLE::__getit (86 samples, 0.31%)</title><rect x="74.4551%" y="277" width="0.3088%" height="15" fill="rgb(209,12,38)"/><text x="74.7051%" y="287.50"></text></g><g><title>md5-crack`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1,276 samples, 4.58%)</title><rect x="70.3185%" y="293" width="4.5819%" height="15" fill="rgb(227,1,9)"/><text x="70.5685%" y="303.50">md5-c..</text></g><g><title>md5-crack`crossbeam_epoch::internal::Global::collect (38 samples, 0.14%)</title><rect x="74.7639%" y="277" width="0.1365%" height="15" fill="rgb(248,47,43)"/><text x="75.0139%" y="287.50"></text></g><g><title>md5-crack`&lt;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (20,787 samples, 74.64%)</title><rect x="0.4453%" y="309" width="74.6418%" height="15" fill="rgb(221,10,30)"/><text x="0.6953%" y="319.50">md5-crack`&lt;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with</text></g><g><title>md5-crack`rayon::iter::plumbing::bridge_unindexed_producer_consumer (20,925 samples, 75.14%)</title><rect x="0.0215%" y="325" width="75.1373%" height="15" fill="rgb(210,229,1)"/><text x="0.2715%" y="335.50">md5-crack`rayon::iter::plumbing::bridge_unindexed_producer_consumer</text></g><g><title>libsystem_kernel.dylib`swtch_pri (842 samples, 3.02%)</title><rect x="75.8483%" y="133" width="3.0234%" height="15" fill="rgb(222,148,37)"/><text x="76.0983%" y="143.50">lib..</text></g><g><title>libsystem_kernel.dylib`__ulock_wake (287 samples, 1.03%)</title><rect x="79.5684%" y="117" width="1.0306%" height="15" fill="rgb(234,67,33)"/><text x="79.8184%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (161 samples, 0.58%)</title><rect x="80.7893%" y="101" width="0.5781%" height="15" fill="rgb(247,98,35)"/><text x="81.0393%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (156 samples, 0.56%)</title><rect x="80.8072%" y="85" width="0.5602%" height="15" fill="rgb(247,138,52)"/><text x="81.0572%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (215 samples, 0.77%)</title><rect x="80.6169%" y="117" width="0.7720%" height="15" fill="rgb(213,79,30)"/><text x="80.8669%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (786 samples, 2.82%)</title><rect x="82.5236%" y="101" width="2.8224%" height="15" fill="rgb(246,177,23)"/><text x="82.7736%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (116 samples, 0.42%)</title><rect x="85.6799%" y="85" width="0.4165%" height="15" fill="rgb(230,62,27)"/><text x="85.9299%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (238 samples, 0.85%)</title><rect x="85.3747%" y="101" width="0.8546%" height="15" fill="rgb(216,154,8)"/><text x="85.6247%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (37 samples, 0.13%)</title><rect x="86.0964%" y="85" width="0.1329%" height="15" fill="rgb(244,35,45)"/><text x="86.3464%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,447 samples, 5.20%)</title><rect x="81.3889%" y="117" width="5.1959%" height="15" fill="rgb(251,115,12)"/><text x="81.6389%" y="127.50">libsys..</text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (99 samples, 0.36%)</title><rect x="86.2293%" y="101" width="0.3555%" height="15" fill="rgb(240,54,50)"/><text x="86.4793%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (57 samples, 0.20%)</title><rect x="87.6477%" y="53" width="0.2047%" height="15" fill="rgb(233,84,52)"/><text x="87.8977%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (246 samples, 0.88%)</title><rect x="87.0588%" y="69" width="0.8833%" height="15" fill="rgb(207,117,47)"/><text x="87.3088%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (309 samples, 1.11%)</title><rect x="86.8362%" y="101" width="1.1096%" height="15" fill="rgb(249,43,39)"/><text x="87.0862%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (263 samples, 0.94%)</title><rect x="87.0013%" y="85" width="0.9444%" height="15" fill="rgb(209,38,44)"/><text x="87.2513%" y="95.50"></text></g><g><title>md5-crack`&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (2,451 samples, 8.80%)</title><rect x="79.1806%" y="133" width="8.8010%" height="15" fill="rgb(236,212,23)"/><text x="79.4306%" y="143.50">md5-crack`&lt;a..</text></g><g><title>md5-crack`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (332 samples, 1.19%)</title><rect x="86.7895%" y="117" width="1.1921%" height="15" fill="rgb(242,79,21)"/><text x="87.0395%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (360 samples, 1.29%)</title><rect x="90.2582%" y="53" width="1.2927%" height="15" fill="rgb(211,96,35)"/><text x="90.5082%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (142 samples, 0.51%)</title><rect x="91.5509%" y="53" width="0.5099%" height="15" fill="rgb(253,215,40)"/><text x="91.8009%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (192 samples, 0.69%)</title><rect x="92.1218%" y="53" width="0.6894%" height="15" fill="rgb(211,81,21)"/><text x="92.3718%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (65 samples, 0.23%)</title><rect x="92.5778%" y="37" width="0.2334%" height="15" fill="rgb(208,190,38)"/><text x="92.8278%" y="47.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (35 samples, 0.13%)</title><rect x="92.8148%" y="53" width="0.1257%" height="15" fill="rgb(235,213,38)"/><text x="93.0648%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,080 samples, 3.88%)</title><rect x="89.0768%" y="69" width="3.8781%" height="15" fill="rgb(237,122,38)"/><text x="89.3268%" y="79.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,151 samples, 4.13%)</title><rect x="88.9188%" y="85" width="4.1330%" height="15" fill="rgb(244,218,35)"/><text x="89.1688%" y="95.50">libsy..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,215 samples, 4.36%)</title><rect x="88.7213%" y="101" width="4.3628%" height="15" fill="rgb(240,68,47)"/><text x="88.9713%" y="111.50">libsy..</text></g><g><title>md5-crack`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,289 samples, 4.63%)</title><rect x="88.5274%" y="117" width="4.6285%" height="15" fill="rgb(210,16,53)"/><text x="88.7774%" y="127.50">md5-c..</text></g><g><title>md5-crack`&lt;itertools::adaptors::multi_product::MultiProduct&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,478 samples, 5.31%)</title><rect x="87.9816%" y="133" width="5.3072%" height="15" fill="rgb(235,124,12)"/><text x="88.2316%" y="143.50">md5-cr..</text></g><g><title>md5-crack`itertools::adaptors::multi_product::MultiProduct&lt;I&gt;::iterate_last (37 samples, 0.13%)</title><rect x="93.1559%" y="117" width="0.1329%" height="15" fill="rgb(224,169,11)"/><text x="93.4059%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (67 samples, 0.24%)</title><rect x="94.0465%" y="101" width="0.2406%" height="15" fill="rgb(250,166,2)"/><text x="94.2965%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (62 samples, 0.22%)</title><rect x="94.0644%" y="85" width="0.2226%" height="15" fill="rgb(242,216,29)"/><text x="94.3144%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (106 samples, 0.38%)</title><rect x="93.9172%" y="117" width="0.3806%" height="15" fill="rgb(230,116,27)"/><text x="94.1672%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (37 samples, 0.13%)</title><rect x="94.7251%" y="101" width="0.1329%" height="15" fill="rgb(228,99,48)"/><text x="94.9751%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (32 samples, 0.11%)</title><rect x="94.8652%" y="101" width="0.1149%" height="15" fill="rgb(253,11,6)"/><text x="95.1152%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (197 samples, 0.71%)</title><rect x="94.2978%" y="117" width="0.7074%" height="15" fill="rgb(247,143,39)"/><text x="94.5478%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (34 samples, 0.12%)</title><rect x="95.5331%" y="101" width="0.1221%" height="15" fill="rgb(236,97,10)"/><text x="95.7831%" y="111.50"></text></g><g><title>md5-crack`&lt;D as digest::digest::Digest&gt;::finalize (787 samples, 2.83%)</title><rect x="95.0842%" y="117" width="2.8260%" height="15" fill="rgb(233,208,19)"/><text x="95.3342%" y="127.50">md..</text></g><g><title>md5-crack`md5::utils::compress (628 samples, 2.26%)</title><rect x="95.6551%" y="101" width="2.2550%" height="15" fill="rgb(216,164,2)"/><text x="95.9051%" y="111.50">m..</text></g><g><title>md5-crack`&lt;D as digest::digest::Digest&gt;::update (60 samples, 0.22%)</title><rect x="97.9102%" y="117" width="0.2154%" height="15" fill="rgb(220,129,5)"/><text x="98.1602%" y="127.50"></text></g><g><title>md5-crack`&lt;md5::Md5 as core::default::Default&gt;::default (33 samples, 0.12%)</title><rect x="98.1256%" y="117" width="0.1185%" height="15" fill="rgb(242,17,10)"/><text x="98.3756%" y="127.50"></text></g><g><title>md5-crack`&lt;rayon::iter::find::FindFolder&lt;T,P&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (1,381 samples, 4.96%)</title><rect x="93.3032%" y="133" width="4.9589%" height="15" fill="rgb(242,107,0)"/><text x="93.5532%" y="143.50">md5-cr..</text></g><g><title>libdyld.dylib`tlv_get_addr (28 samples, 0.10%)</title><rect x="99.5942%" y="117" width="0.1005%" height="15" fill="rgb(251,28,31)"/><text x="99.8442%" y="127.50"></text></g><g><title>md5-crack`crossbeam_epoch::default::HANDLE::__getit (34 samples, 0.12%)</title><rect x="99.6948%" y="117" width="0.1221%" height="15" fill="rgb(233,223,10)"/><text x="99.9448%" y="127.50"></text></g><g><title>md5-crack`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (432 samples, 1.55%)</title><rect x="98.3375%" y="133" width="1.5512%" height="15" fill="rgb(215,21,27)"/><text x="98.5875%" y="143.50"></text></g><g><title>md5-crack`&lt;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (6,864 samples, 24.65%)</title><rect x="75.3025%" y="149" width="24.6472%" height="15" fill="rgb(232,23,21)"/><text x="75.5525%" y="159.50">md5-crack`&lt;rayon::iter::par_bridge::Ite..</text></g><g><title>libsystem_pthread.dylib`thread_start (27,847 samples, 99.99%)</title><rect x="0.0000%" y="469" width="99.9928%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="479.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (27,847 samples, 99.99%)</title><rect x="0.0000%" y="453" width="99.9928%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="463.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>md5-crack`std::sys::unix::thread::Thread::new::thread_start (27,847 samples, 99.99%)</title><rect x="0.0000%" y="437" width="99.9928%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="447.50">md5-crack`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>md5-crack`core::ops::function::FnOnce::call_once{{vtable.shim}} (27,847 samples, 99.99%)</title><rect x="0.0000%" y="421" width="99.9928%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="431.50">md5-crack`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>md5-crack`std::sys_common::backtrace::__rust_begin_short_backtrace (27,847 samples, 99.99%)</title><rect x="0.0000%" y="405" width="99.9928%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="415.50">md5-crack`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>md5-crack`rayon_core::registry::ThreadBuilder::run (27,847 samples, 99.99%)</title><rect x="0.0000%" y="389" width="99.9928%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="399.50">md5-crack`rayon_core::registry::ThreadBuilder::run</text></g><g><title>md5-crack`rayon_core::registry::WorkerThread::wait_until_cold (27,847 samples, 99.99%)</title><rect x="0.0000%" y="373" width="99.9928%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="383.50">md5-crack`rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>md5-crack`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (27,842 samples, 99.97%)</title><rect x="0.0180%" y="357" width="99.9749%" height="15" fill="rgb(241,108,4)"/><text x="0.2680%" y="367.50">md5-crack`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>md5-crack`std::panicking::try (27,841 samples, 99.97%)</title><rect x="0.0215%" y="341" width="99.9713%" height="15" fill="rgb(247,173,49)"/><text x="0.2715%" y="351.50">md5-crack`std::panicking::try</text></g><g><title>md5-crack`rayon_core::join::join_context::_{{closure}} (6,916 samples, 24.83%)</title><rect x="75.1589%" y="325" width="24.8339%" height="15" fill="rgb(224,114,35)"/><text x="75.4089%" y="335.50">md5-crack`rayon_core::join::join_context..</text></g><g><title>md5-crack`rayon::iter::plumbing::bridge_unindexed_producer_consumer (6,916 samples, 24.83%)</title><rect x="75.1589%" y="309" width="24.8339%" height="15" fill="rgb(245,159,27)"/><text x="75.4089%" y="319.50">md5-crack`rayon::iter::plumbing::bridge_..</text></g><g><title>md5-crack`rayon_core::join::join_context (6,916 samples, 24.83%)</title><rect x="75.1589%" y="293" width="24.8339%" height="15" fill="rgb(245,172,44)"/><text x="75.4089%" y="303.50">md5-crack`rayon_core::join::join_context</text></g><g><title>md5-crack`rayon_core::join::join_context::_{{closure}} (6,916 samples, 24.83%)</title><rect x="75.1589%" y="277" width="24.8339%" height="15" fill="rgb(236,23,11)"/><text x="75.4089%" y="287.50">md5-crack`rayon_core::join::join_context..</text></g><g><title>md5-crack`rayon::iter::plumbing::bridge_unindexed_producer_consumer (6,916 samples, 24.83%)</title><rect x="75.1589%" y="261" width="24.8339%" height="15" fill="rgb(205,117,38)"/><text x="75.4089%" y="271.50">md5-crack`rayon::iter::plumbing::bridge_..</text></g><g><title>md5-crack`rayon_core::join::join_context (6,916 samples, 24.83%)</title><rect x="75.1589%" y="245" width="24.8339%" height="15" fill="rgb(237,72,25)"/><text x="75.4089%" y="255.50">md5-crack`rayon_core::join::join_context</text></g><g><title>md5-crack`rayon_core::join::join_context::_{{closure}} (6,916 samples, 24.83%)</title><rect x="75.1589%" y="229" width="24.8339%" height="15" fill="rgb(244,70,9)"/><text x="75.4089%" y="239.50">md5-crack`rayon_core::join::join_context..</text></g><g><title>md5-crack`rayon::iter::plumbing::bridge_unindexed_producer_consumer (6,916 samples, 24.83%)</title><rect x="75.1589%" y="213" width="24.8339%" height="15" fill="rgb(217,125,39)"/><text x="75.4089%" y="223.50">md5-crack`rayon::iter::plumbing::bridge_..</text></g><g><title>md5-crack`rayon_core::join::join_context (6,916 samples, 24.83%)</title><rect x="75.1589%" y="197" width="24.8339%" height="15" fill="rgb(235,36,10)"/><text x="75.4089%" y="207.50">md5-crack`rayon_core::join::join_context</text></g><g><title>md5-crack`rayon_core::join::join_context::_{{closure}} (6,916 samples, 24.83%)</title><rect x="75.1589%" y="181" width="24.8339%" height="15" fill="rgb(251,123,47)"/><text x="75.4089%" y="191.50">md5-crack`rayon_core::join::join_context..</text></g><g><title>md5-crack`rayon::iter::plumbing::bridge_unindexed_producer_consumer (6,916 samples, 24.83%)</title><rect x="75.1589%" y="165" width="24.8339%" height="15" fill="rgb(221,13,13)"/><text x="75.4089%" y="175.50">md5-crack`rayon::iter::plumbing::bridge_..</text></g><g><title>all (27,849 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="495.50"></text></g></svg></svg>